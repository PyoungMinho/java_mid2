선택 가이드
* 순서가 중요하고 중복이 허용되는 경우**: `List` 인터페이스를 사용하자. `ArrayList` 가 일반적인 선택이지만, 추가/삭제 작업이 앞쪽에서 빈번한 경우에는 `LinkedList` 가 성능상 더 좋은 선택이다.
* 중복을 허용하지 않고 순서가 중요하지 않은 경우**: `HashSet` 을 사용하자. 순서를 유지해야 하면 `LinkedHashSet` 을, 정렬된 순서가 필요하면 `TreeSet` 을 사용하자
* 요소를 키-값 쌍으로 저장하려는 경우**: `Map` 인터페이스를 사용하자. 순서가 중요하지 않다면 `HashMap` 을, 순서 를 유지해야 한다면 `LinkedHashMap` 을, 정렬된 순서가 필요하면 `TreeMap` 을 사용하자
* 요소를 처리하기 전에 보관해야 하는 경우**: `Queue` , `Deque` 인터페이스를 사용하자. 스택, 큐 구조 모두 `ArrayDeque` 를 사용하는 것이 가장 빠르다. 만약 우선순위에 따라 요소를 처리해야 한다면 `PriorityQueue` 를 고려하자.

**참고**: `PriorityQueue` 는 자주 사용하지 않아서 따로 설명하지 않았다. 큐에 입력하는 요소에 우선순위를 부여할 수 있다.

실무 선택 가이드
`List` 의 경우 대부분 `ArrayList` 를 사용한다.
`Set` 의 경우 대부분 `HashSet` 을 사용한다.
`Map` 의 경우 대부분 `HashMap` 을 사용한다.
`Queue` 의 경우 대부분 `ArrayDeque` 를 사용한다.